package org.usucsatl;

public class LevenshteinDistance {

	public static String[] WordList_Region_One={"Nutrition","Facts","Serving","Size","Cup",
			"Servings","Per","Container","Cereal","Skim","Milk","with","Amount",
			"Calories", "Total","Saturated","Trans","Fat","from","About",
			"Polyunsaturated","Monounsaturated","Cholesterol","Sodium","Daily",
			"Carbohydrate","Sugars","Potassium","Dietary","Fiber","Soluble",
			"Insoluble","Other","Protein","Value"};
	
	public static String[] WordList_Region_Two={"Vitamin","Calcium","Iron",
		"Thiamin","Riboflavin","Niacin","B6","Folic Acid","Phosphorus",
		"Magnesium","Zinc","Copper"};
	
	public static String[] WordList_Region_Three={"INGREDIENTS","ORGANIC","WHOLE",
		"GRAIN","WHITE","WHEAT","RAISINS","EAVPORATED","CANE","JUICE","BARLEY",
		"MALT","SEA","SALT","ALLERGEN","Contains","Artificial","High","Flavors"};
	
	public static String[] WordList_Region_whole={"Nutrition","Facts","Serving","Size","Cup",
		"Servings","Per","Container","Cereal","Skim","Milk","with","Amount",
		"Calories", "Total","Saturated","Trans","Fat","from","About",
		"Polyunsaturated","Monounsaturated","Cholesterol","Sodium","Daily",
		"Carbohydrate","Sugars","Potassium","Dietary","Fiber","Soluble",
		"Insoluble","Other","Protein","Value","Vitamin","Calcium","Iron",
		"Thiamin","Riboflavin","Niacin","B6","Folic Acid","Phosphorus",
		"Magnesium","Zinc","Copper","INGREDIENTS","ORGANIC","WHOLE",
		"GRAIN","WHITE","WHEAT","RAISINS","EAVPORATED","CANE","JUICE","BARLEY",
		"MALT","SEA","SALT","ALLERGEN","Contains","Artificial","High","Flavors"};
	
	public static String getMatch(String input)
	{
		String result="";
		int matchCoeff=Integer.MAX_VALUE;
		
		for(String word:WordList_Region_whole)
		{
			
			int tempMatchCoeff=computeDistance(input, word);
			//System.out.println(input + "-->" + word + ": " + tempMatchCoeff);
			if(tempMatchCoeff < matchCoeff)
			{
				matchCoeff=tempMatchCoeff;
				result=word;
			}
		}
		
		return result;
	}
	
	public static int computeDistance(String s1, String s2) {
	    s1 = s1.toLowerCase();
	    s2 = s2.toLowerCase();
	 
	    int[] costs = new int[s2.length() + 1];
	    for (int i = 0; i <= s1.length(); i++) {
	      int lastValue = i;
	      for (int j = 0; j <= s2.length(); j++) {
	        if (i == 0)
	          costs[j] = j;
	        else {
	          if (j > 0) {
	            int newValue = costs[j - 1];
	            if (s1.charAt(i - 1) != s2.charAt(j - 1))
	              newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
	            costs[j - 1] = lastValue;
	            lastValue = newValue;
	          }
	        }
	      }
	      if (i > 0)
	        costs[s2.length()] = lastValue;
	    }
	    return costs[s2.length()];
	  }
	 
	  	 
	  

}
