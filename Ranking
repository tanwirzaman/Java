/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package interviewprep;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class NewClass {

	private static int[] input = { 4, 1, 5 };
        static ArrayList<String> res=new ArrayList<String>();         
	public static void main(String[] args) {

		String searchString = "451";
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < input.length; i++) {
			sb.append(input[i]);
		}
		List<String> list = permutations("",sb.toString());

		//Sort output List
		Collections.sort(list);
		System.out.println("Sorted permutation = " + list);
		
                //Binary Search in the list
		int zeroIndex = Collections.binarySearch(list, searchString);
		System.out.println("Index of " + searchString + " in the generated permutation is = " + ++zeroIndex);

	}
/*
	//Generate the permutation of the array elements
	private static List<String> permutations(String input) {

		ArrayList<String>  inputList = new ArrayList<String> ();

		if (input.length() == 1) {
			inputList.add(input);
			return inputList;
		}

		List<String> result = permutations(input.substring(0, input.length() - 1));

		ArrayList<String> updatedResult = new ArrayList<String>();

		for (int i = 0; i < result.size(); i++) {
			String currentString = (String) result.get(i);

			//Add last character at the start
			updatedResult.add(input.charAt(input.length() - 1) + currentString);
			
			//Add last character in the middle
			for (int j = 1; j < currentString.length(); j++) {
				updatedResult.add(currentString.substring(0, j)
						+ input.charAt(input.length() - 1)
						+ currentString.substring(j, currentString.length()));
			}
			//Add last character at the end
			updatedResult.add(currentString + input.charAt(input.length() - 1));
		}
		return updatedResult;
	}
  */      
        private static List<String> permutations(String prefix,String input) {

    
		if(input.length()==0)
                {
                    System.out.println(prefix);
                    res.add(prefix);
                }
                else
                {
                    for(int i=0;i<input.length();i++)
                    {
                        permutations(prefix+input.charAt(i), input.substring(0,i)+input.substring(i+1));
                    }
                }
		
		return res;
	}
}
